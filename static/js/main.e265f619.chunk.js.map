{"version":3,"sources":["bubbleSort/Bar.jsx","bubbleSort/Controller.jsx","bubbleSort/Visualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Bar","props","height","bgColor","barStyle","width","backgroundColor","margin","style","Controller","className","Typography","id","gutterBottom","Slider","defaultValue","getAriaValueText","setSpeed","valueLabelDisplay","step","marks","min","max","BAR_COLOR","swap","i","j","array","temp","timer","ms","Promise","res","setTimeout","bubbleSort","setArray","setRunningFlag","speed","a","tempArray","length","clearTimeout","Visualizer","useState","isRunning","useEffect","Array","fill","Math","floor","random","getRandomFilledArray","Button","variant","color","disabled","onClick","map","item","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e265f619.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Bar(props) {\r\n    const { height, bgColor } = props;\r\n\r\n    let barStyle = {\r\n        height: `${height}px`,\r\n        width: \"20px\",\r\n        backgroundColor: bgColor,\r\n        margin: \"4px\",\r\n    }\r\n    return (\r\n        <div style={barStyle} />\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nfunction Controller(props) {\r\n    return (\r\n        <div className=\"controller\">\r\n            <Typography id=\"discrete-slider-small-steps\" gutterBottom>\r\n              Speed\r\n            </Typography>\r\n            <Slider\r\n        defaultValue={30}\r\n        getAriaValueText={props.setSpeed}\r\n        aria-labelledby=\"discrete-slider\"\r\n        valueLabelDisplay=\"auto\"\r\n        step={10}\r\n        marks\r\n        min={10}\r\n        max={3000}\r\n      />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controller;\r\n\r\n","import React, {useState, useEffect} from 'react'\r\nimport Bar from './Bar';\r\nimport Controller from './Controller';\r\nimport Button from '@material-ui/core/Button';\r\nimport './styles.css';\r\n\r\nconst BAR_COLOR = '#7c549a';\r\nconst SELECTED_BLUR = 'green';\r\nconst FINISHED_BAR = 'greenyellow';\r\n\r\nconst getRandomData = (min, max) => {\r\n   return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nconst getRandomFilledArray = () => {\r\n    let tempArray = new Array(10).fill(0);    \r\n    for(let i = 0; i < 50; i++) {\r\n        tempArray[i] = {height: getRandomData(3, 500), backgroundColor: BAR_COLOR};\r\n    }\r\n\r\n    return tempArray;\r\n}\r\n\r\nconst swap = (i, j, array) => {\r\n    let temp = array[i].height;\r\n    array[i].height = array[j].height;\r\n    array[j].height = temp;\r\n}\r\n\r\nconst timer = ms => new Promise( res => setTimeout(res, ms));\r\n\r\nconst bubbleSort = async(array, setArray, setRunningFlag, speed) => {\r\n    let tempArray = [...array];\r\n    setRunningFlag(true);\r\n    for(let i = 0; i < array.length; i++) {\r\n        for(let j = 1; j < array.length - i; j++) {\r\n              tempArray[j].backgroundColor = SELECTED_BLUR;\r\n              if(tempArray[j].height < tempArray[j-1].height) {\r\n                swap(j, j-1, tempArray);\r\n            }\r\n            \r\n            setArray([...tempArray]);\r\n            tempArray[j].backgroundColor = BAR_COLOR;\r\n            tempArray[array.length - i-1].backgroundColor = FINISHED_BAR;\r\n            await timer(speed);\r\n            };\r\n            await timer(speed); \r\n        }\r\n\r\n        clearTimeout();\r\n        setRunningFlag(false);\r\n    }\r\n\r\nfunction Visualizer() {\r\n    const [array, setArray] = useState([]);\r\n    const [speed, setSpeed] = useState(10);\r\n    const [isRunning, setRunningFlag] = useState(false);\r\n \r\n    useEffect(() => {\r\n      setArray(getRandomFilledArray());\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <header className=\"header\">\r\n                <h2>Sorting Visualizer</h2>\r\n                <div className=\"control-panel\">\r\n                <Controller setSpeed={setSpeed} />\r\n                <Button variant=\"contained\" color=\"primary\" disabled={isRunning} onClick={() => bubbleSort(array, setArray, setRunningFlag, speed)}>Start sorting</Button>\r\n                </div>\r\n            </header>\r\n            <br/>\r\n            <br />\r\n            <div className=\"bar-container\">\r\n               {\r\n                   array.map((item, index) => (\r\n                       <Bar key={index} height={item.height} bgColor={item.backgroundColor} />\r\n                   ))\r\n               }\r\n            </div>\r\n            <footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Visualizer\r\n","import BubbleSort from './bubbleSort/Visualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BubbleSort />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}